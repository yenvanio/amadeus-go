/*
Flight Offers Price

Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).

API version: 1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"github.com/yenvanio/amadeus-go/amadeus/utils"
)

// checks if the Phone type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Phone{}

// Phone phone information
type Phone struct {
	DeviceType *PhoneDeviceType `json:"deviceType,omitempty"`
	// Country calling code of the phone number, as defined by the International Communication Union. Examples - \"1\" for US, \"371\" for Latvia.
	CountryCallingCode *string `json:"countryCallingCode,omitempty"`
	// Phone number. Composed of digits only. The number of digits depends on the country.
	Number *string `json:"number,omitempty"`
}

// NewPhone instantiates a new Phone object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPhone() *Phone {
	this := Phone{}
	return &this
}

// NewPhoneWithDefaults instantiates a new Phone object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPhoneWithDefaults() *Phone {
	this := Phone{}
	return &this
}

// GetDeviceType returns the DeviceType field value if set, zero value otherwise.
func (o *Phone) GetDeviceType() PhoneDeviceType {
	if o == nil || utils.IsNil(o.DeviceType) {
		var ret PhoneDeviceType
		return ret
	}
	return *o.DeviceType
}

// GetDeviceTypeOk returns a tuple with the DeviceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Phone) GetDeviceTypeOk() (*PhoneDeviceType, bool) {
	if o == nil || utils.IsNil(o.DeviceType) {
		return nil, false
	}
	return o.DeviceType, true
}

// HasDeviceType returns a boolean if a field has been set.
func (o *Phone) HasDeviceType() bool {
	if o != nil && !utils.IsNil(o.DeviceType) {
		return true
	}

	return false
}

// SetDeviceType gets a reference to the given PhoneDeviceType and assigns it to the DeviceType field.
func (o *Phone) SetDeviceType(v PhoneDeviceType) {
	o.DeviceType = &v
}

// GetCountryCallingCode returns the CountryCallingCode field value if set, zero value otherwise.
func (o *Phone) GetCountryCallingCode() string {
	if o == nil || utils.IsNil(o.CountryCallingCode) {
		var ret string
		return ret
	}
	return *o.CountryCallingCode
}

// GetCountryCallingCodeOk returns a tuple with the CountryCallingCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Phone) GetCountryCallingCodeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.CountryCallingCode) {
		return nil, false
	}
	return o.CountryCallingCode, true
}

// HasCountryCallingCode returns a boolean if a field has been set.
func (o *Phone) HasCountryCallingCode() bool {
	if o != nil && !utils.IsNil(o.CountryCallingCode) {
		return true
	}

	return false
}

// SetCountryCallingCode gets a reference to the given string and assigns it to the CountryCallingCode field.
func (o *Phone) SetCountryCallingCode(v string) {
	o.CountryCallingCode = &v
}

// GetNumber returns the Number field value if set, zero value otherwise.
func (o *Phone) GetNumber() string {
	if o == nil || utils.IsNil(o.Number) {
		var ret string
		return ret
	}
	return *o.Number
}

// GetNumberOk returns a tuple with the Number field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Phone) GetNumberOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Number) {
		return nil, false
	}
	return o.Number, true
}

// HasNumber returns a boolean if a field has been set.
func (o *Phone) HasNumber() bool {
	if o != nil && !utils.IsNil(o.Number) {
		return true
	}

	return false
}

// SetNumber gets a reference to the given string and assigns it to the Number field.
func (o *Phone) SetNumber(v string) {
	o.Number = &v
}

func (o Phone) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Phone) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.DeviceType) {
		toSerialize["deviceType"] = o.DeviceType
	}
	if !utils.IsNil(o.CountryCallingCode) {
		toSerialize["countryCallingCode"] = o.CountryCallingCode
	}
	if !utils.IsNil(o.Number) {
		toSerialize["number"] = o.Number
	}
	return toSerialize, nil
}

type NullablePhone struct {
	value *Phone
	isSet bool
}

func (v NullablePhone) Get() *Phone {
	return v.value
}

func (v *NullablePhone) Set(val *Phone) {
	v.value = val
	v.isSet = true
}

func (v NullablePhone) IsSet() bool {
	return v.isSet
}

func (v *NullablePhone) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePhone(val *Phone) *NullablePhone {
	return &NullablePhone{value: val, isSet: true}
}

func (v NullablePhone) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePhone) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


