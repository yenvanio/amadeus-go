/*
Flight Offers Price

Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).

API version: 1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"github.com/yenvanio/amadeus-go/amadeus/utils"
)

// checks if the CreditCardFee type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &CreditCardFee{}

// CreditCardFee struct for CreditCardFee
type CreditCardFee struct {
	Brand *PaymentBrand `json:"brand,omitempty"`
	Amount *string      `json:"amount,omitempty"`
	Currency *string `json:"currency,omitempty"`
	// Id of the flightOffer concerned by the credit card fee
	FlightOfferId *string `json:"flightOfferId,omitempty"`
}

// NewCreditCardFee instantiates a new CreditCardFee object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreditCardFee() *CreditCardFee {
	this := CreditCardFee{}
	return &this
}

// NewCreditCardFeeWithDefaults instantiates a new CreditCardFee object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreditCardFeeWithDefaults() *CreditCardFee {
	this := CreditCardFee{}
	return &this
}

// GetBrand returns the Brand field value if set, zero value otherwise.
func (o *CreditCardFee) GetBrand() PaymentBrand {
	if o == nil || utils.IsNil(o.Brand) {
		var ret PaymentBrand
		return ret
	}
	return *o.Brand
}

// GetBrandOk returns a tuple with the Brand field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreditCardFee) GetBrandOk() (*PaymentBrand, bool) {
	if o == nil || utils.IsNil(o.Brand) {
		return nil, false
	}
	return o.Brand, true
}

// HasBrand returns a boolean if a field has been set.
func (o *CreditCardFee) HasBrand() bool {
	if o != nil && !utils.IsNil(o.Brand) {
		return true
	}

	return false
}

// SetBrand gets a reference to the given PaymentBrand and assigns it to the Brand field.
func (o *CreditCardFee) SetBrand(v PaymentBrand) {
	o.Brand = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *CreditCardFee) GetAmount() string {
	if o == nil || utils.IsNil(o.Amount) {
		var ret string
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreditCardFee) GetAmountOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *CreditCardFee) HasAmount() bool {
	if o != nil && !utils.IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given string and assigns it to the Amount field.
func (o *CreditCardFee) SetAmount(v string) {
	o.Amount = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *CreditCardFee) GetCurrency() string {
	if o == nil || utils.IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreditCardFee) GetCurrencyOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *CreditCardFee) HasCurrency() bool {
	if o != nil && !utils.IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *CreditCardFee) SetCurrency(v string) {
	o.Currency = &v
}

// GetFlightOfferId returns the FlightOfferId field value if set, zero value otherwise.
func (o *CreditCardFee) GetFlightOfferId() string {
	if o == nil || utils.IsNil(o.FlightOfferId) {
		var ret string
		return ret
	}
	return *o.FlightOfferId
}

// GetFlightOfferIdOk returns a tuple with the FlightOfferId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreditCardFee) GetFlightOfferIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.FlightOfferId) {
		return nil, false
	}
	return o.FlightOfferId, true
}

// HasFlightOfferId returns a boolean if a field has been set.
func (o *CreditCardFee) HasFlightOfferId() bool {
	if o != nil && !utils.IsNil(o.FlightOfferId) {
		return true
	}

	return false
}

// SetFlightOfferId gets a reference to the given string and assigns it to the FlightOfferId field.
func (o *CreditCardFee) SetFlightOfferId(v string) {
	o.FlightOfferId = &v
}

func (o CreditCardFee) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreditCardFee) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Brand) {
		toSerialize["brand"] = o.Brand
	}
	if !utils.IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !utils.IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !utils.IsNil(o.FlightOfferId) {
		toSerialize["flightOfferId"] = o.FlightOfferId
	}
	return toSerialize, nil
}

type NullableCreditCardFee struct {
	value *CreditCardFee
	isSet bool
}

func (v NullableCreditCardFee) Get() *CreditCardFee {
	return v.value
}

func (v *NullableCreditCardFee) Set(val *CreditCardFee) {
	v.value = val
	v.isSet = true
}

func (v NullableCreditCardFee) IsSet() bool {
	return v.isSet
}

func (v *NullableCreditCardFee) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreditCardFee(val *CreditCardFee) *NullableCreditCardFee {
	return &NullableCreditCardFee{value: val, isSet: true}
}

func (v NullableCreditCardFee) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreditCardFee) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


