/*
Amadeus OAuth2 Login

Amadeus for Developers uses OAuth2 to authenticate access requests. OAuth2 generates an access token which grants the client permission to access a protected resource. The method to acquire a token is called grant. There are different types of OAuth2 grants. Amadeus for Developers uses the Client Credentials Grant.   https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the AmadeusOAuth2Token type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AmadeusOAuth2Token{}

// AmadeusOAuth2Token The token response
type AmadeusOAuth2Token struct {
	// The access token issued by the authorization server.
	Type *string `json:"type,omitempty"`
	// The user who requested the access_token
	Username *string `json:"username,omitempty"`
	// The application which is requested the access_token
	ApplicationName *string `json:"application_name,omitempty"`
	// The client_id is a public identifier for apps
	ClientId *string `json:"client_id,omitempty"`
	// token_type is a parameter in Access Token generate call to Authorization server, which essentially represents how an access_token will be generated and presented for resource access calls
	TokenType *string `json:"token_type,omitempty"`
	// Access tokens are a String which applications use to make API requests on behalf of a user.
	AccessToken *string `json:"access_token,omitempty"`
	// The lifetime in seconds of the access token
	ExpiresIn *int64 `json:"expires_in,omitempty"`
	// The state
	State *string `json:"state,omitempty"`
	// Scope is a mechanism in OAuth 2.0 to limit an application's access to a user's account
	Scope *string `json:"scope,omitempty"`
}

// NewAmadeusOAuth2Token instantiates a new AmadeusOAuth2Token object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAmadeusOAuth2Token() *AmadeusOAuth2Token {
	this := AmadeusOAuth2Token{}
	return &this
}

// NewAmadeusOAuth2TokenWithDefaults instantiates a new AmadeusOAuth2Token object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAmadeusOAuth2TokenWithDefaults() *AmadeusOAuth2Token {
	this := AmadeusOAuth2Token{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AmadeusOAuth2Token) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmadeusOAuth2Token) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AmadeusOAuth2Token) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *AmadeusOAuth2Token) SetType(v string) {
	o.Type = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *AmadeusOAuth2Token) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmadeusOAuth2Token) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *AmadeusOAuth2Token) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *AmadeusOAuth2Token) SetUsername(v string) {
	o.Username = &v
}

// GetApplicationName returns the ApplicationName field value if set, zero value otherwise.
func (o *AmadeusOAuth2Token) GetApplicationName() string {
	if o == nil || IsNil(o.ApplicationName) {
		var ret string
		return ret
	}
	return *o.ApplicationName
}

// GetApplicationNameOk returns a tuple with the ApplicationName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmadeusOAuth2Token) GetApplicationNameOk() (*string, bool) {
	if o == nil || IsNil(o.ApplicationName) {
		return nil, false
	}
	return o.ApplicationName, true
}

// HasApplicationName returns a boolean if a field has been set.
func (o *AmadeusOAuth2Token) HasApplicationName() bool {
	if o != nil && !IsNil(o.ApplicationName) {
		return true
	}

	return false
}

// SetApplicationName gets a reference to the given string and assigns it to the ApplicationName field.
func (o *AmadeusOAuth2Token) SetApplicationName(v string) {
	o.ApplicationName = &v
}

// GetClientId returns the ClientId field value if set, zero value otherwise.
func (o *AmadeusOAuth2Token) GetClientId() string {
	if o == nil || IsNil(o.ClientId) {
		var ret string
		return ret
	}
	return *o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmadeusOAuth2Token) GetClientIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClientId) {
		return nil, false
	}
	return o.ClientId, true
}

// HasClientId returns a boolean if a field has been set.
func (o *AmadeusOAuth2Token) HasClientId() bool {
	if o != nil && !IsNil(o.ClientId) {
		return true
	}

	return false
}

// SetClientId gets a reference to the given string and assigns it to the ClientId field.
func (o *AmadeusOAuth2Token) SetClientId(v string) {
	o.ClientId = &v
}

// GetTokenType returns the TokenType field value if set, zero value otherwise.
func (o *AmadeusOAuth2Token) GetTokenType() string {
	if o == nil || IsNil(o.TokenType) {
		var ret string
		return ret
	}
	return *o.TokenType
}

// GetTokenTypeOk returns a tuple with the TokenType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmadeusOAuth2Token) GetTokenTypeOk() (*string, bool) {
	if o == nil || IsNil(o.TokenType) {
		return nil, false
	}
	return o.TokenType, true
}

// HasTokenType returns a boolean if a field has been set.
func (o *AmadeusOAuth2Token) HasTokenType() bool {
	if o != nil && !IsNil(o.TokenType) {
		return true
	}

	return false
}

// SetTokenType gets a reference to the given string and assigns it to the TokenType field.
func (o *AmadeusOAuth2Token) SetTokenType(v string) {
	o.TokenType = &v
}

// GetAccessToken returns the AccessToken field value if set, zero value otherwise.
func (o *AmadeusOAuth2Token) GetAccessToken() string {
	if o == nil || IsNil(o.AccessToken) {
		var ret string
		return ret
	}
	return *o.AccessToken
}

// GetAccessTokenOk returns a tuple with the AccessToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmadeusOAuth2Token) GetAccessTokenOk() (*string, bool) {
	if o == nil || IsNil(o.AccessToken) {
		return nil, false
	}
	return o.AccessToken, true
}

// HasAccessToken returns a boolean if a field has been set.
func (o *AmadeusOAuth2Token) HasAccessToken() bool {
	if o != nil && !IsNil(o.AccessToken) {
		return true
	}

	return false
}

// SetAccessToken gets a reference to the given string and assigns it to the AccessToken field.
func (o *AmadeusOAuth2Token) SetAccessToken(v string) {
	o.AccessToken = &v
}

// GetExpiresIn returns the ExpiresIn field value if set, zero value otherwise.
func (o *AmadeusOAuth2Token) GetExpiresIn() int64 {
	if o == nil || IsNil(o.ExpiresIn) {
		var ret int64
		return ret
	}
	return *o.ExpiresIn
}

// GetExpiresInOk returns a tuple with the ExpiresIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmadeusOAuth2Token) GetExpiresInOk() (*int64, bool) {
	if o == nil || IsNil(o.ExpiresIn) {
		return nil, false
	}
	return o.ExpiresIn, true
}

// HasExpiresIn returns a boolean if a field has been set.
func (o *AmadeusOAuth2Token) HasExpiresIn() bool {
	if o != nil && !IsNil(o.ExpiresIn) {
		return true
	}

	return false
}

// SetExpiresIn gets a reference to the given int64 and assigns it to the ExpiresIn field.
func (o *AmadeusOAuth2Token) SetExpiresIn(v int64) {
	o.ExpiresIn = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *AmadeusOAuth2Token) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmadeusOAuth2Token) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *AmadeusOAuth2Token) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *AmadeusOAuth2Token) SetState(v string) {
	o.State = &v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *AmadeusOAuth2Token) GetScope() string {
	if o == nil || IsNil(o.Scope) {
		var ret string
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmadeusOAuth2Token) GetScopeOk() (*string, bool) {
	if o == nil || IsNil(o.Scope) {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *AmadeusOAuth2Token) HasScope() bool {
	if o != nil && !IsNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given string and assigns it to the Scope field.
func (o *AmadeusOAuth2Token) SetScope(v string) {
	o.Scope = &v
}

func (o AmadeusOAuth2Token) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AmadeusOAuth2Token) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.ApplicationName) {
		toSerialize["application_name"] = o.ApplicationName
	}
	if !IsNil(o.ClientId) {
		toSerialize["client_id"] = o.ClientId
	}
	if !IsNil(o.TokenType) {
		toSerialize["token_type"] = o.TokenType
	}
	if !IsNil(o.AccessToken) {
		toSerialize["access_token"] = o.AccessToken
	}
	if !IsNil(o.ExpiresIn) {
		toSerialize["expires_in"] = o.ExpiresIn
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}
	return toSerialize, nil
}

type NullableAmadeusOAuth2Token struct {
	value *AmadeusOAuth2Token
	isSet bool
}

func (v NullableAmadeusOAuth2Token) Get() *AmadeusOAuth2Token {
	return v.value
}

func (v *NullableAmadeusOAuth2Token) Set(val *AmadeusOAuth2Token) {
	v.value = val
	v.isSet = true
}

func (v NullableAmadeusOAuth2Token) IsSet() bool {
	return v.isSet
}

func (v *NullableAmadeusOAuth2Token) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAmadeusOAuth2Token(val *AmadeusOAuth2Token) *NullableAmadeusOAuth2Token {
	return &NullableAmadeusOAuth2Token{value: val, isSet: true}
}

func (v NullableAmadeusOAuth2Token) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAmadeusOAuth2Token) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


