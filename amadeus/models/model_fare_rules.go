/*
Flight Offers Price

Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).

API version: 1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"github.com/yenvanio/amadeus-go/amadeus"
)

// checks if the FareRules type satisfies the MappedNullable interface at compile time
var _ amadeus.MappedNullable = &FareRules{}

// FareRules struct for FareRules
type FareRules struct {
	// The currency of the penalties
	Currency *string         `json:"currency,omitempty"`
	Rules []TermAndCondition `json:"rules,omitempty"`
}

// NewFareRules instantiates a new FareRules object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFareRules() *FareRules {
	this := FareRules{}
	return &this
}

// NewFareRulesWithDefaults instantiates a new FareRules object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFareRulesWithDefaults() *FareRules {
	this := FareRules{}
	return &this
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *FareRules) GetCurrency() string {
	if o == nil || amadeus.IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FareRules) GetCurrencyOk() (*string, bool) {
	if o == nil || amadeus.IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *FareRules) HasCurrency() bool {
	if o != nil && !amadeus.IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *FareRules) SetCurrency(v string) {
	o.Currency = &v
}

// GetRules returns the Rules field value if set, zero value otherwise.
func (o *FareRules) GetRules() []TermAndCondition {
	if o == nil || amadeus.IsNil(o.Rules) {
		var ret []TermAndCondition
		return ret
	}
	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FareRules) GetRulesOk() ([]TermAndCondition, bool) {
	if o == nil || amadeus.IsNil(o.Rules) {
		return nil, false
	}
	return o.Rules, true
}

// HasRules returns a boolean if a field has been set.
func (o *FareRules) HasRules() bool {
	if o != nil && !amadeus.IsNil(o.Rules) {
		return true
	}

	return false
}

// SetRules gets a reference to the given []TermAndCondition and assigns it to the Rules field.
func (o *FareRules) SetRules(v []TermAndCondition) {
	o.Rules = v
}

func (o FareRules) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FareRules) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !amadeus.IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !amadeus.IsNil(o.Rules) {
		toSerialize["rules"] = o.Rules
	}
	return toSerialize, nil
}

type NullableFareRules struct {
	value *FareRules
	isSet bool
}

func (v NullableFareRules) Get() *FareRules {
	return v.value
}

func (v *NullableFareRules) Set(val *FareRules) {
	v.value = val
	v.isSet = true
}

func (v NullableFareRules) IsSet() bool {
	return v.isSet
}

func (v *NullableFareRules) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFareRules(val *FareRules) *NullableFareRules {
	return &NullableFareRules{value: val, isSet: true}
}

func (v NullableFareRules) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFareRules) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


