/*
Flight Offers Price

Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).

API version: 1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"github.com/yenvanio/amadeus-go/amadeus"
)

// checks if the TermAndCondition type satisfies the MappedNullable interface at compile time
var _ amadeus.MappedNullable = &TermAndCondition{}

// TermAndCondition struct for TermAndCondition
type TermAndCondition struct {
	// This defines what type of modification is concerned in this rule.
	Category *string `json:"category,omitempty"`
	Circumstances *string `json:"circumstances,omitempty"`
	NotApplicable *bool `json:"notApplicable,omitempty"`
	MaxPenaltyAmount *string   `json:"maxPenaltyAmount,omitempty"`
	Descriptions []Description `json:"descriptions,omitempty"`
}

// NewTermAndCondition instantiates a new TermAndCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTermAndCondition() *TermAndCondition {
	this := TermAndCondition{}
	return &this
}

// NewTermAndConditionWithDefaults instantiates a new TermAndCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTermAndConditionWithDefaults() *TermAndCondition {
	this := TermAndCondition{}
	return &this
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *TermAndCondition) GetCategory() string {
	if o == nil || amadeus.IsNil(o.Category) {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TermAndCondition) GetCategoryOk() (*string, bool) {
	if o == nil || amadeus.IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *TermAndCondition) HasCategory() bool {
	if o != nil && !amadeus.IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *TermAndCondition) SetCategory(v string) {
	o.Category = &v
}

// GetCircumstances returns the Circumstances field value if set, zero value otherwise.
func (o *TermAndCondition) GetCircumstances() string {
	if o == nil || amadeus.IsNil(o.Circumstances) {
		var ret string
		return ret
	}
	return *o.Circumstances
}

// GetCircumstancesOk returns a tuple with the Circumstances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TermAndCondition) GetCircumstancesOk() (*string, bool) {
	if o == nil || amadeus.IsNil(o.Circumstances) {
		return nil, false
	}
	return o.Circumstances, true
}

// HasCircumstances returns a boolean if a field has been set.
func (o *TermAndCondition) HasCircumstances() bool {
	if o != nil && !amadeus.IsNil(o.Circumstances) {
		return true
	}

	return false
}

// SetCircumstances gets a reference to the given string and assigns it to the Circumstances field.
func (o *TermAndCondition) SetCircumstances(v string) {
	o.Circumstances = &v
}

// GetNotApplicable returns the NotApplicable field value if set, zero value otherwise.
func (o *TermAndCondition) GetNotApplicable() bool {
	if o == nil || amadeus.IsNil(o.NotApplicable) {
		var ret bool
		return ret
	}
	return *o.NotApplicable
}

// GetNotApplicableOk returns a tuple with the NotApplicable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TermAndCondition) GetNotApplicableOk() (*bool, bool) {
	if o == nil || amadeus.IsNil(o.NotApplicable) {
		return nil, false
	}
	return o.NotApplicable, true
}

// HasNotApplicable returns a boolean if a field has been set.
func (o *TermAndCondition) HasNotApplicable() bool {
	if o != nil && !amadeus.IsNil(o.NotApplicable) {
		return true
	}

	return false
}

// SetNotApplicable gets a reference to the given bool and assigns it to the NotApplicable field.
func (o *TermAndCondition) SetNotApplicable(v bool) {
	o.NotApplicable = &v
}

// GetMaxPenaltyAmount returns the MaxPenaltyAmount field value if set, zero value otherwise.
func (o *TermAndCondition) GetMaxPenaltyAmount() string {
	if o == nil || amadeus.IsNil(o.MaxPenaltyAmount) {
		var ret string
		return ret
	}
	return *o.MaxPenaltyAmount
}

// GetMaxPenaltyAmountOk returns a tuple with the MaxPenaltyAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TermAndCondition) GetMaxPenaltyAmountOk() (*string, bool) {
	if o == nil || amadeus.IsNil(o.MaxPenaltyAmount) {
		return nil, false
	}
	return o.MaxPenaltyAmount, true
}

// HasMaxPenaltyAmount returns a boolean if a field has been set.
func (o *TermAndCondition) HasMaxPenaltyAmount() bool {
	if o != nil && !amadeus.IsNil(o.MaxPenaltyAmount) {
		return true
	}

	return false
}

// SetMaxPenaltyAmount gets a reference to the given string and assigns it to the MaxPenaltyAmount field.
func (o *TermAndCondition) SetMaxPenaltyAmount(v string) {
	o.MaxPenaltyAmount = &v
}

// GetDescriptions returns the Descriptions field value if set, zero value otherwise.
func (o *TermAndCondition) GetDescriptions() []Description {
	if o == nil || amadeus.IsNil(o.Descriptions) {
		var ret []Description
		return ret
	}
	return o.Descriptions
}

// GetDescriptionsOk returns a tuple with the Descriptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TermAndCondition) GetDescriptionsOk() ([]Description, bool) {
	if o == nil || amadeus.IsNil(o.Descriptions) {
		return nil, false
	}
	return o.Descriptions, true
}

// HasDescriptions returns a boolean if a field has been set.
func (o *TermAndCondition) HasDescriptions() bool {
	if o != nil && !amadeus.IsNil(o.Descriptions) {
		return true
	}

	return false
}

// SetDescriptions gets a reference to the given []Description and assigns it to the Descriptions field.
func (o *TermAndCondition) SetDescriptions(v []Description) {
	o.Descriptions = v
}

func (o TermAndCondition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TermAndCondition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !amadeus.IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !amadeus.IsNil(o.Circumstances) {
		toSerialize["circumstances"] = o.Circumstances
	}
	if !amadeus.IsNil(o.NotApplicable) {
		toSerialize["notApplicable"] = o.NotApplicable
	}
	if !amadeus.IsNil(o.MaxPenaltyAmount) {
		toSerialize["maxPenaltyAmount"] = o.MaxPenaltyAmount
	}
	if !amadeus.IsNil(o.Descriptions) {
		toSerialize["descriptions"] = o.Descriptions
	}
	return toSerialize, nil
}

type NullableTermAndCondition struct {
	value *TermAndCondition
	isSet bool
}

func (v NullableTermAndCondition) Get() *TermAndCondition {
	return v.value
}

func (v *NullableTermAndCondition) Set(val *TermAndCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableTermAndCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableTermAndCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTermAndCondition(val *TermAndCondition) *NullableTermAndCondition {
	return &NullableTermAndCondition{value: val, isSet: true}
}

func (v NullableTermAndCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTermAndCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


