/*
Flight Offers Price

Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).

API version: 1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"github.com/yenvanio/amadeus-go/amadeus/utils"
)

// checks if the Name type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Name{}

// Name name
type Name struct {
	// First name.
	FirstName *string `json:"firstName,omitempty"`
	// Last name.
	LastName *string `json:"lastName,omitempty"`
	// Middle name(s), for example \"Lee\" in \"John Lee Smith\".
	MiddleName *string `json:"middleName,omitempty"`
	// second last name
	SecondLastName *string `json:"secondLastName,omitempty"`
}

// NewName instantiates a new Name object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewName() *Name {
	this := Name{}
	return &this
}

// NewNameWithDefaults instantiates a new Name object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNameWithDefaults() *Name {
	this := Name{}
	return &this
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *Name) GetFirstName() string {
	if o == nil || utils.IsNil(o.FirstName) {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Name) GetFirstNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.FirstName) {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *Name) HasFirstName() bool {
	if o != nil && !utils.IsNil(o.FirstName) {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *Name) SetFirstName(v string) {
	o.FirstName = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *Name) GetLastName() string {
	if o == nil || utils.IsNil(o.LastName) {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Name) GetLastNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.LastName) {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *Name) HasLastName() bool {
	if o != nil && !utils.IsNil(o.LastName) {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *Name) SetLastName(v string) {
	o.LastName = &v
}

// GetMiddleName returns the MiddleName field value if set, zero value otherwise.
func (o *Name) GetMiddleName() string {
	if o == nil || utils.IsNil(o.MiddleName) {
		var ret string
		return ret
	}
	return *o.MiddleName
}

// GetMiddleNameOk returns a tuple with the MiddleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Name) GetMiddleNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.MiddleName) {
		return nil, false
	}
	return o.MiddleName, true
}

// HasMiddleName returns a boolean if a field has been set.
func (o *Name) HasMiddleName() bool {
	if o != nil && !utils.IsNil(o.MiddleName) {
		return true
	}

	return false
}

// SetMiddleName gets a reference to the given string and assigns it to the MiddleName field.
func (o *Name) SetMiddleName(v string) {
	o.MiddleName = &v
}

// GetSecondLastName returns the SecondLastName field value if set, zero value otherwise.
func (o *Name) GetSecondLastName() string {
	if o == nil || utils.IsNil(o.SecondLastName) {
		var ret string
		return ret
	}
	return *o.SecondLastName
}

// GetSecondLastNameOk returns a tuple with the SecondLastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Name) GetSecondLastNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.SecondLastName) {
		return nil, false
	}
	return o.SecondLastName, true
}

// HasSecondLastName returns a boolean if a field has been set.
func (o *Name) HasSecondLastName() bool {
	if o != nil && !utils.IsNil(o.SecondLastName) {
		return true
	}

	return false
}

// SetSecondLastName gets a reference to the given string and assigns it to the SecondLastName field.
func (o *Name) SetSecondLastName(v string) {
	o.SecondLastName = &v
}

func (o Name) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Name) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.FirstName) {
		toSerialize["firstName"] = o.FirstName
	}
	if !utils.IsNil(o.LastName) {
		toSerialize["lastName"] = o.LastName
	}
	if !utils.IsNil(o.MiddleName) {
		toSerialize["middleName"] = o.MiddleName
	}
	if !utils.IsNil(o.SecondLastName) {
		toSerialize["secondLastName"] = o.SecondLastName
	}
	return toSerialize, nil
}

type NullableName struct {
	value *Name
	isSet bool
}

func (v NullableName) Get() *Name {
	return v.value
}

func (v *NullableName) Set(val *Name) {
	v.value = val
	v.isSet = true
}

func (v NullableName) IsSet() bool {
	return v.isSet
}

func (v *NullableName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableName(val *Name) *NullableName {
	return &NullableName{value: val, isSet: true}
}

func (v NullableName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


