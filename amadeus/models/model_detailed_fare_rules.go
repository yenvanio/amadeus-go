/*
Flight Offers Price

Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).

API version: 1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"github.com/yenvanio/amadeus-go/amadeus/utils"
)

// checks if the DetailedFareRules type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &DetailedFareRules{}

// DetailedFareRules struct for DetailedFareRules
type DetailedFareRules struct {
	FareBasis *string `json:"fareBasis,omitempty"`
	Name *string                `json:"name,omitempty"`
	FareNotes *TermAndCondition `json:"fareNotes,omitempty"`
	// Id of the segment concerned by the fare rule
	SegmentId *string `json:"segmentId,omitempty"`
}

// NewDetailedFareRules instantiates a new DetailedFareRules object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDetailedFareRules() *DetailedFareRules {
	this := DetailedFareRules{}
	return &this
}

// NewDetailedFareRulesWithDefaults instantiates a new DetailedFareRules object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDetailedFareRulesWithDefaults() *DetailedFareRules {
	this := DetailedFareRules{}
	return &this
}

// GetFareBasis returns the FareBasis field value if set, zero value otherwise.
func (o *DetailedFareRules) GetFareBasis() string {
	if o == nil || utils.IsNil(o.FareBasis) {
		var ret string
		return ret
	}
	return *o.FareBasis
}

// GetFareBasisOk returns a tuple with the FareBasis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedFareRules) GetFareBasisOk() (*string, bool) {
	if o == nil || utils.IsNil(o.FareBasis) {
		return nil, false
	}
	return o.FareBasis, true
}

// HasFareBasis returns a boolean if a field has been set.
func (o *DetailedFareRules) HasFareBasis() bool {
	if o != nil && !utils.IsNil(o.FareBasis) {
		return true
	}

	return false
}

// SetFareBasis gets a reference to the given string and assigns it to the FareBasis field.
func (o *DetailedFareRules) SetFareBasis(v string) {
	o.FareBasis = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DetailedFareRules) GetName() string {
	if o == nil || utils.IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedFareRules) GetNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DetailedFareRules) HasName() bool {
	if o != nil && !utils.IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DetailedFareRules) SetName(v string) {
	o.Name = &v
}

// GetFareNotes returns the FareNotes field value if set, zero value otherwise.
func (o *DetailedFareRules) GetFareNotes() TermAndCondition {
	if o == nil || utils.IsNil(o.FareNotes) {
		var ret TermAndCondition
		return ret
	}
	return *o.FareNotes
}

// GetFareNotesOk returns a tuple with the FareNotes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedFareRules) GetFareNotesOk() (*TermAndCondition, bool) {
	if o == nil || utils.IsNil(o.FareNotes) {
		return nil, false
	}
	return o.FareNotes, true
}

// HasFareNotes returns a boolean if a field has been set.
func (o *DetailedFareRules) HasFareNotes() bool {
	if o != nil && !utils.IsNil(o.FareNotes) {
		return true
	}

	return false
}

// SetFareNotes gets a reference to the given TermAndCondition and assigns it to the FareNotes field.
func (o *DetailedFareRules) SetFareNotes(v TermAndCondition) {
	o.FareNotes = &v
}

// GetSegmentId returns the SegmentId field value if set, zero value otherwise.
func (o *DetailedFareRules) GetSegmentId() string {
	if o == nil || utils.IsNil(o.SegmentId) {
		var ret string
		return ret
	}
	return *o.SegmentId
}

// GetSegmentIdOk returns a tuple with the SegmentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedFareRules) GetSegmentIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.SegmentId) {
		return nil, false
	}
	return o.SegmentId, true
}

// HasSegmentId returns a boolean if a field has been set.
func (o *DetailedFareRules) HasSegmentId() bool {
	if o != nil && !utils.IsNil(o.SegmentId) {
		return true
	}

	return false
}

// SetSegmentId gets a reference to the given string and assigns it to the SegmentId field.
func (o *DetailedFareRules) SetSegmentId(v string) {
	o.SegmentId = &v
}

func (o DetailedFareRules) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DetailedFareRules) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.FareBasis) {
		toSerialize["fareBasis"] = o.FareBasis
	}
	if !utils.IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !utils.IsNil(o.FareNotes) {
		toSerialize["fareNotes"] = o.FareNotes
	}
	if !utils.IsNil(o.SegmentId) {
		toSerialize["segmentId"] = o.SegmentId
	}
	return toSerialize, nil
}

type NullableDetailedFareRules struct {
	value *DetailedFareRules
	isSet bool
}

func (v NullableDetailedFareRules) Get() *DetailedFareRules {
	return v.value
}

func (v *NullableDetailedFareRules) Set(val *DetailedFareRules) {
	v.value = val
	v.isSet = true
}

func (v NullableDetailedFareRules) IsSet() bool {
	return v.isSet
}

func (v *NullableDetailedFareRules) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDetailedFareRules(val *DetailedFareRules) *NullableDetailedFareRules {
	return &NullableDetailedFareRules{value: val, isSet: true}
}

func (v NullableDetailedFareRules) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDetailedFareRules) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


