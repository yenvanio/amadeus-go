/*
Flight Offers Price

Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).

API version: 1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"github.com/yenvanio/amadeus-go/amadeus"
)

// checks if the IdentityDocument type satisfies the MappedNullable interface at compile time
var _ amadeus.MappedNullable = &IdentityDocument{}

// IdentityDocument documents of the traveler
type IdentityDocument struct {
	// The document number (shown on the document) . E.g. QFU514563221J
	Number *string `json:"number,omitempty"`
	// Date at which the document has been issued.
	IssuanceDate *string `json:"issuanceDate,omitempty"`
	// Date after which the document is not valid anymore.
	ExpiryDate *string `json:"expiryDate,omitempty"`
	// [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) of the country that issued the document
	IssuanceCountry *string `json:"issuanceCountry,omitempty"`
	// A more precise information concerning the place where the document has been issued, when available. It may be a country, a state, a city or any other type of location. e.g. New-York
	IssuanceLocation *string `json:"issuanceLocation,omitempty"`
	// [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) of the nationality appearing on the document
	Nationality *string `json:"nationality,omitempty"`
	// Birth place as indicated on the document
	BirthPlace *string         `json:"birthPlace,omitempty"`
	DocumentType *DocumentType `json:"documentType,omitempty"`
	// [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) of the country where the document is valid
	ValidityCountry *string `json:"validityCountry,omitempty"`
	// [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) of the country of birth
	BirthCountry *string `json:"birthCountry,omitempty"`
	// boolean to specify if the traveler is the holder of the document
	Holder *bool `json:"holder,omitempty"`
}

// NewIdentityDocument instantiates a new IdentityDocument object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentityDocument() *IdentityDocument {
	this := IdentityDocument{}
	return &this
}

// NewIdentityDocumentWithDefaults instantiates a new IdentityDocument object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentityDocumentWithDefaults() *IdentityDocument {
	this := IdentityDocument{}
	return &this
}

// GetNumber returns the Number field value if set, zero value otherwise.
func (o *IdentityDocument) GetNumber() string {
	if o == nil || amadeus.IsNil(o.Number) {
		var ret string
		return ret
	}
	return *o.Number
}

// GetNumberOk returns a tuple with the Number field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityDocument) GetNumberOk() (*string, bool) {
	if o == nil || amadeus.IsNil(o.Number) {
		return nil, false
	}
	return o.Number, true
}

// HasNumber returns a boolean if a field has been set.
func (o *IdentityDocument) HasNumber() bool {
	if o != nil && !amadeus.IsNil(o.Number) {
		return true
	}

	return false
}

// SetNumber gets a reference to the given string and assigns it to the Number field.
func (o *IdentityDocument) SetNumber(v string) {
	o.Number = &v
}

// GetIssuanceDate returns the IssuanceDate field value if set, zero value otherwise.
func (o *IdentityDocument) GetIssuanceDate() string {
	if o == nil || amadeus.IsNil(o.IssuanceDate) {
		var ret string
		return ret
	}
	return *o.IssuanceDate
}

// GetIssuanceDateOk returns a tuple with the IssuanceDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityDocument) GetIssuanceDateOk() (*string, bool) {
	if o == nil || amadeus.IsNil(o.IssuanceDate) {
		return nil, false
	}
	return o.IssuanceDate, true
}

// HasIssuanceDate returns a boolean if a field has been set.
func (o *IdentityDocument) HasIssuanceDate() bool {
	if o != nil && !amadeus.IsNil(o.IssuanceDate) {
		return true
	}

	return false
}

// SetIssuanceDate gets a reference to the given string and assigns it to the IssuanceDate field.
func (o *IdentityDocument) SetIssuanceDate(v string) {
	o.IssuanceDate = &v
}

// GetExpiryDate returns the ExpiryDate field value if set, zero value otherwise.
func (o *IdentityDocument) GetExpiryDate() string {
	if o == nil || amadeus.IsNil(o.ExpiryDate) {
		var ret string
		return ret
	}
	return *o.ExpiryDate
}

// GetExpiryDateOk returns a tuple with the ExpiryDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityDocument) GetExpiryDateOk() (*string, bool) {
	if o == nil || amadeus.IsNil(o.ExpiryDate) {
		return nil, false
	}
	return o.ExpiryDate, true
}

// HasExpiryDate returns a boolean if a field has been set.
func (o *IdentityDocument) HasExpiryDate() bool {
	if o != nil && !amadeus.IsNil(o.ExpiryDate) {
		return true
	}

	return false
}

// SetExpiryDate gets a reference to the given string and assigns it to the ExpiryDate field.
func (o *IdentityDocument) SetExpiryDate(v string) {
	o.ExpiryDate = &v
}

// GetIssuanceCountry returns the IssuanceCountry field value if set, zero value otherwise.
func (o *IdentityDocument) GetIssuanceCountry() string {
	if o == nil || amadeus.IsNil(o.IssuanceCountry) {
		var ret string
		return ret
	}
	return *o.IssuanceCountry
}

// GetIssuanceCountryOk returns a tuple with the IssuanceCountry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityDocument) GetIssuanceCountryOk() (*string, bool) {
	if o == nil || amadeus.IsNil(o.IssuanceCountry) {
		return nil, false
	}
	return o.IssuanceCountry, true
}

// HasIssuanceCountry returns a boolean if a field has been set.
func (o *IdentityDocument) HasIssuanceCountry() bool {
	if o != nil && !amadeus.IsNil(o.IssuanceCountry) {
		return true
	}

	return false
}

// SetIssuanceCountry gets a reference to the given string and assigns it to the IssuanceCountry field.
func (o *IdentityDocument) SetIssuanceCountry(v string) {
	o.IssuanceCountry = &v
}

// GetIssuanceLocation returns the IssuanceLocation field value if set, zero value otherwise.
func (o *IdentityDocument) GetIssuanceLocation() string {
	if o == nil || amadeus.IsNil(o.IssuanceLocation) {
		var ret string
		return ret
	}
	return *o.IssuanceLocation
}

// GetIssuanceLocationOk returns a tuple with the IssuanceLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityDocument) GetIssuanceLocationOk() (*string, bool) {
	if o == nil || amadeus.IsNil(o.IssuanceLocation) {
		return nil, false
	}
	return o.IssuanceLocation, true
}

// HasIssuanceLocation returns a boolean if a field has been set.
func (o *IdentityDocument) HasIssuanceLocation() bool {
	if o != nil && !amadeus.IsNil(o.IssuanceLocation) {
		return true
	}

	return false
}

// SetIssuanceLocation gets a reference to the given string and assigns it to the IssuanceLocation field.
func (o *IdentityDocument) SetIssuanceLocation(v string) {
	o.IssuanceLocation = &v
}

// GetNationality returns the Nationality field value if set, zero value otherwise.
func (o *IdentityDocument) GetNationality() string {
	if o == nil || amadeus.IsNil(o.Nationality) {
		var ret string
		return ret
	}
	return *o.Nationality
}

// GetNationalityOk returns a tuple with the Nationality field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityDocument) GetNationalityOk() (*string, bool) {
	if o == nil || amadeus.IsNil(o.Nationality) {
		return nil, false
	}
	return o.Nationality, true
}

// HasNationality returns a boolean if a field has been set.
func (o *IdentityDocument) HasNationality() bool {
	if o != nil && !amadeus.IsNil(o.Nationality) {
		return true
	}

	return false
}

// SetNationality gets a reference to the given string and assigns it to the Nationality field.
func (o *IdentityDocument) SetNationality(v string) {
	o.Nationality = &v
}

// GetBirthPlace returns the BirthPlace field value if set, zero value otherwise.
func (o *IdentityDocument) GetBirthPlace() string {
	if o == nil || amadeus.IsNil(o.BirthPlace) {
		var ret string
		return ret
	}
	return *o.BirthPlace
}

// GetBirthPlaceOk returns a tuple with the BirthPlace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityDocument) GetBirthPlaceOk() (*string, bool) {
	if o == nil || amadeus.IsNil(o.BirthPlace) {
		return nil, false
	}
	return o.BirthPlace, true
}

// HasBirthPlace returns a boolean if a field has been set.
func (o *IdentityDocument) HasBirthPlace() bool {
	if o != nil && !amadeus.IsNil(o.BirthPlace) {
		return true
	}

	return false
}

// SetBirthPlace gets a reference to the given string and assigns it to the BirthPlace field.
func (o *IdentityDocument) SetBirthPlace(v string) {
	o.BirthPlace = &v
}

// GetDocumentType returns the DocumentType field value if set, zero value otherwise.
func (o *IdentityDocument) GetDocumentType() DocumentType {
	if o == nil || amadeus.IsNil(o.DocumentType) {
		var ret DocumentType
		return ret
	}
	return *o.DocumentType
}

// GetDocumentTypeOk returns a tuple with the DocumentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityDocument) GetDocumentTypeOk() (*DocumentType, bool) {
	if o == nil || amadeus.IsNil(o.DocumentType) {
		return nil, false
	}
	return o.DocumentType, true
}

// HasDocumentType returns a boolean if a field has been set.
func (o *IdentityDocument) HasDocumentType() bool {
	if o != nil && !amadeus.IsNil(o.DocumentType) {
		return true
	}

	return false
}

// SetDocumentType gets a reference to the given DocumentType and assigns it to the DocumentType field.
func (o *IdentityDocument) SetDocumentType(v DocumentType) {
	o.DocumentType = &v
}

// GetValidityCountry returns the ValidityCountry field value if set, zero value otherwise.
func (o *IdentityDocument) GetValidityCountry() string {
	if o == nil || amadeus.IsNil(o.ValidityCountry) {
		var ret string
		return ret
	}
	return *o.ValidityCountry
}

// GetValidityCountryOk returns a tuple with the ValidityCountry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityDocument) GetValidityCountryOk() (*string, bool) {
	if o == nil || amadeus.IsNil(o.ValidityCountry) {
		return nil, false
	}
	return o.ValidityCountry, true
}

// HasValidityCountry returns a boolean if a field has been set.
func (o *IdentityDocument) HasValidityCountry() bool {
	if o != nil && !amadeus.IsNil(o.ValidityCountry) {
		return true
	}

	return false
}

// SetValidityCountry gets a reference to the given string and assigns it to the ValidityCountry field.
func (o *IdentityDocument) SetValidityCountry(v string) {
	o.ValidityCountry = &v
}

// GetBirthCountry returns the BirthCountry field value if set, zero value otherwise.
func (o *IdentityDocument) GetBirthCountry() string {
	if o == nil || amadeus.IsNil(o.BirthCountry) {
		var ret string
		return ret
	}
	return *o.BirthCountry
}

// GetBirthCountryOk returns a tuple with the BirthCountry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityDocument) GetBirthCountryOk() (*string, bool) {
	if o == nil || amadeus.IsNil(o.BirthCountry) {
		return nil, false
	}
	return o.BirthCountry, true
}

// HasBirthCountry returns a boolean if a field has been set.
func (o *IdentityDocument) HasBirthCountry() bool {
	if o != nil && !amadeus.IsNil(o.BirthCountry) {
		return true
	}

	return false
}

// SetBirthCountry gets a reference to the given string and assigns it to the BirthCountry field.
func (o *IdentityDocument) SetBirthCountry(v string) {
	o.BirthCountry = &v
}

// GetHolder returns the Holder field value if set, zero value otherwise.
func (o *IdentityDocument) GetHolder() bool {
	if o == nil || amadeus.IsNil(o.Holder) {
		var ret bool
		return ret
	}
	return *o.Holder
}

// GetHolderOk returns a tuple with the Holder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityDocument) GetHolderOk() (*bool, bool) {
	if o == nil || amadeus.IsNil(o.Holder) {
		return nil, false
	}
	return o.Holder, true
}

// HasHolder returns a boolean if a field has been set.
func (o *IdentityDocument) HasHolder() bool {
	if o != nil && !amadeus.IsNil(o.Holder) {
		return true
	}

	return false
}

// SetHolder gets a reference to the given bool and assigns it to the Holder field.
func (o *IdentityDocument) SetHolder(v bool) {
	o.Holder = &v
}

func (o IdentityDocument) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdentityDocument) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !amadeus.IsNil(o.Number) {
		toSerialize["number"] = o.Number
	}
	if !amadeus.IsNil(o.IssuanceDate) {
		toSerialize["issuanceDate"] = o.IssuanceDate
	}
	if !amadeus.IsNil(o.ExpiryDate) {
		toSerialize["expiryDate"] = o.ExpiryDate
	}
	if !amadeus.IsNil(o.IssuanceCountry) {
		toSerialize["issuanceCountry"] = o.IssuanceCountry
	}
	if !amadeus.IsNil(o.IssuanceLocation) {
		toSerialize["issuanceLocation"] = o.IssuanceLocation
	}
	if !amadeus.IsNil(o.Nationality) {
		toSerialize["nationality"] = o.Nationality
	}
	if !amadeus.IsNil(o.BirthPlace) {
		toSerialize["birthPlace"] = o.BirthPlace
	}
	if !amadeus.IsNil(o.DocumentType) {
		toSerialize["documentType"] = o.DocumentType
	}
	if !amadeus.IsNil(o.ValidityCountry) {
		toSerialize["validityCountry"] = o.ValidityCountry
	}
	if !amadeus.IsNil(o.BirthCountry) {
		toSerialize["birthCountry"] = o.BirthCountry
	}
	if !amadeus.IsNil(o.Holder) {
		toSerialize["holder"] = o.Holder
	}
	return toSerialize, nil
}

type NullableIdentityDocument struct {
	value *IdentityDocument
	isSet bool
}

func (v NullableIdentityDocument) Get() *IdentityDocument {
	return v.value
}

func (v *NullableIdentityDocument) Set(val *IdentityDocument) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityDocument) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityDocument) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityDocument(val *IdentityDocument) *NullableIdentityDocument {
	return &NullableIdentityDocument{value: val, isSet: true}
}

func (v NullableIdentityDocument) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityDocument) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


