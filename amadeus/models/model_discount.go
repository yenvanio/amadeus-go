/*
Flight Offers Price

Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).

API version: 1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"github.com/yenvanio/amadeus-go/amadeus/utils"
)

// checks if the Discount type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Discount{}

// Discount traveler discount
type Discount struct {
	SubType *DiscountType `json:"subType,omitempty"`
	// city of residence
	CityName *string                   `json:"cityName,omitempty"`
	TravelerType *DiscountTravelerType `json:"travelerType,omitempty"`
	// resident card number
	CardNumber *string `json:"cardNumber,omitempty"`
	// resident certificate number
	CertificateNumber *string `json:"certificateNumber,omitempty"`
}

// NewDiscount instantiates a new Discount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiscount() *Discount {
	this := Discount{}
	return &this
}

// NewDiscountWithDefaults instantiates a new Discount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiscountWithDefaults() *Discount {
	this := Discount{}
	return &this
}

// GetSubType returns the SubType field value if set, zero value otherwise.
func (o *Discount) GetSubType() DiscountType {
	if o == nil || utils.IsNil(o.SubType) {
		var ret DiscountType
		return ret
	}
	return *o.SubType
}

// GetSubTypeOk returns a tuple with the SubType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Discount) GetSubTypeOk() (*DiscountType, bool) {
	if o == nil || utils.IsNil(o.SubType) {
		return nil, false
	}
	return o.SubType, true
}

// HasSubType returns a boolean if a field has been set.
func (o *Discount) HasSubType() bool {
	if o != nil && !utils.IsNil(o.SubType) {
		return true
	}

	return false
}

// SetSubType gets a reference to the given DiscountType and assigns it to the SubType field.
func (o *Discount) SetSubType(v DiscountType) {
	o.SubType = &v
}

// GetCityName returns the CityName field value if set, zero value otherwise.
func (o *Discount) GetCityName() string {
	if o == nil || utils.IsNil(o.CityName) {
		var ret string
		return ret
	}
	return *o.CityName
}

// GetCityNameOk returns a tuple with the CityName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Discount) GetCityNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.CityName) {
		return nil, false
	}
	return o.CityName, true
}

// HasCityName returns a boolean if a field has been set.
func (o *Discount) HasCityName() bool {
	if o != nil && !utils.IsNil(o.CityName) {
		return true
	}

	return false
}

// SetCityName gets a reference to the given string and assigns it to the CityName field.
func (o *Discount) SetCityName(v string) {
	o.CityName = &v
}

// GetTravelerType returns the TravelerType field value if set, zero value otherwise.
func (o *Discount) GetTravelerType() DiscountTravelerType {
	if o == nil || utils.IsNil(o.TravelerType) {
		var ret DiscountTravelerType
		return ret
	}
	return *o.TravelerType
}

// GetTravelerTypeOk returns a tuple with the TravelerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Discount) GetTravelerTypeOk() (*DiscountTravelerType, bool) {
	if o == nil || utils.IsNil(o.TravelerType) {
		return nil, false
	}
	return o.TravelerType, true
}

// HasTravelerType returns a boolean if a field has been set.
func (o *Discount) HasTravelerType() bool {
	if o != nil && !utils.IsNil(o.TravelerType) {
		return true
	}

	return false
}

// SetTravelerType gets a reference to the given DiscountTravelerType and assigns it to the TravelerType field.
func (o *Discount) SetTravelerType(v DiscountTravelerType) {
	o.TravelerType = &v
}

// GetCardNumber returns the CardNumber field value if set, zero value otherwise.
func (o *Discount) GetCardNumber() string {
	if o == nil || utils.IsNil(o.CardNumber) {
		var ret string
		return ret
	}
	return *o.CardNumber
}

// GetCardNumberOk returns a tuple with the CardNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Discount) GetCardNumberOk() (*string, bool) {
	if o == nil || utils.IsNil(o.CardNumber) {
		return nil, false
	}
	return o.CardNumber, true
}

// HasCardNumber returns a boolean if a field has been set.
func (o *Discount) HasCardNumber() bool {
	if o != nil && !utils.IsNil(o.CardNumber) {
		return true
	}

	return false
}

// SetCardNumber gets a reference to the given string and assigns it to the CardNumber field.
func (o *Discount) SetCardNumber(v string) {
	o.CardNumber = &v
}

// GetCertificateNumber returns the CertificateNumber field value if set, zero value otherwise.
func (o *Discount) GetCertificateNumber() string {
	if o == nil || utils.IsNil(o.CertificateNumber) {
		var ret string
		return ret
	}
	return *o.CertificateNumber
}

// GetCertificateNumberOk returns a tuple with the CertificateNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Discount) GetCertificateNumberOk() (*string, bool) {
	if o == nil || utils.IsNil(o.CertificateNumber) {
		return nil, false
	}
	return o.CertificateNumber, true
}

// HasCertificateNumber returns a boolean if a field has been set.
func (o *Discount) HasCertificateNumber() bool {
	if o != nil && !utils.IsNil(o.CertificateNumber) {
		return true
	}

	return false
}

// SetCertificateNumber gets a reference to the given string and assigns it to the CertificateNumber field.
func (o *Discount) SetCertificateNumber(v string) {
	o.CertificateNumber = &v
}

func (o Discount) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Discount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.SubType) {
		toSerialize["subType"] = o.SubType
	}
	if !utils.IsNil(o.CityName) {
		toSerialize["cityName"] = o.CityName
	}
	if !utils.IsNil(o.TravelerType) {
		toSerialize["travelerType"] = o.TravelerType
	}
	if !utils.IsNil(o.CardNumber) {
		toSerialize["cardNumber"] = o.CardNumber
	}
	if !utils.IsNil(o.CertificateNumber) {
		toSerialize["certificateNumber"] = o.CertificateNumber
	}
	return toSerialize, nil
}

type NullableDiscount struct {
	value *Discount
	isSet bool
}

func (v NullableDiscount) Get() *Discount {
	return v.value
}

func (v *NullableDiscount) Set(val *Discount) {
	v.value = val
	v.isSet = true
}

func (v NullableDiscount) IsSet() bool {
	return v.isSet
}

func (v *NullableDiscount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiscount(val *Discount) *NullableDiscount {
	return &NullableDiscount{value: val, isSet: true}
}

func (v NullableDiscount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiscount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


