/*
Flight Offers Price

Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).

API version: 1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"github.com/yenvanio/amadeus-go/amadeus/utils"
)

// checks if the Stakeholder type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Stakeholder{}

// Stakeholder stakeholder definition
type Stakeholder struct {
	// item identifier
	Id *string `json:"id,omitempty"`
	// The date of birth in ISO 8601 format (yyyy-mm-dd)
	DateOfBirth *string       `json:"dateOfBirth,omitempty"`
	Gender *StakeholderGender `json:"gender,omitempty"`
	Name *Name                `json:"name,omitempty"`
	// Advanced Passenger Information - regulatory identity documents - SSR DOCS & DOCO elements
	Documents []IdentityDocument `json:"documents,omitempty"`
}

// NewStakeholder instantiates a new Stakeholder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStakeholder() *Stakeholder {
	this := Stakeholder{}
	return &this
}

// NewStakeholderWithDefaults instantiates a new Stakeholder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStakeholderWithDefaults() *Stakeholder {
	this := Stakeholder{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Stakeholder) GetId() string {
	if o == nil || utils.IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stakeholder) GetIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Stakeholder) HasId() bool {
	if o != nil && !utils.IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Stakeholder) SetId(v string) {
	o.Id = &v
}

// GetDateOfBirth returns the DateOfBirth field value if set, zero value otherwise.
func (o *Stakeholder) GetDateOfBirth() string {
	if o == nil || utils.IsNil(o.DateOfBirth) {
		var ret string
		return ret
	}
	return *o.DateOfBirth
}

// GetDateOfBirthOk returns a tuple with the DateOfBirth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stakeholder) GetDateOfBirthOk() (*string, bool) {
	if o == nil || utils.IsNil(o.DateOfBirth) {
		return nil, false
	}
	return o.DateOfBirth, true
}

// HasDateOfBirth returns a boolean if a field has been set.
func (o *Stakeholder) HasDateOfBirth() bool {
	if o != nil && !utils.IsNil(o.DateOfBirth) {
		return true
	}

	return false
}

// SetDateOfBirth gets a reference to the given string and assigns it to the DateOfBirth field.
func (o *Stakeholder) SetDateOfBirth(v string) {
	o.DateOfBirth = &v
}

// GetGender returns the Gender field value if set, zero value otherwise.
func (o *Stakeholder) GetGender() StakeholderGender {
	if o == nil || utils.IsNil(o.Gender) {
		var ret StakeholderGender
		return ret
	}
	return *o.Gender
}

// GetGenderOk returns a tuple with the Gender field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stakeholder) GetGenderOk() (*StakeholderGender, bool) {
	if o == nil || utils.IsNil(o.Gender) {
		return nil, false
	}
	return o.Gender, true
}

// HasGender returns a boolean if a field has been set.
func (o *Stakeholder) HasGender() bool {
	if o != nil && !utils.IsNil(o.Gender) {
		return true
	}

	return false
}

// SetGender gets a reference to the given StakeholderGender and assigns it to the Gender field.
func (o *Stakeholder) SetGender(v StakeholderGender) {
	o.Gender = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Stakeholder) GetName() Name {
	if o == nil || utils.IsNil(o.Name) {
		var ret Name
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stakeholder) GetNameOk() (*Name, bool) {
	if o == nil || utils.IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Stakeholder) HasName() bool {
	if o != nil && !utils.IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given Name and assigns it to the Name field.
func (o *Stakeholder) SetName(v Name) {
	o.Name = &v
}

// GetDocuments returns the Documents field value if set, zero value otherwise.
func (o *Stakeholder) GetDocuments() []IdentityDocument {
	if o == nil || utils.IsNil(o.Documents) {
		var ret []IdentityDocument
		return ret
	}
	return o.Documents
}

// GetDocumentsOk returns a tuple with the Documents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stakeholder) GetDocumentsOk() ([]IdentityDocument, bool) {
	if o == nil || utils.IsNil(o.Documents) {
		return nil, false
	}
	return o.Documents, true
}

// HasDocuments returns a boolean if a field has been set.
func (o *Stakeholder) HasDocuments() bool {
	if o != nil && !utils.IsNil(o.Documents) {
		return true
	}

	return false
}

// SetDocuments gets a reference to the given []IdentityDocument and assigns it to the Documents field.
func (o *Stakeholder) SetDocuments(v []IdentityDocument) {
	o.Documents = v
}

func (o Stakeholder) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Stakeholder) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !utils.IsNil(o.DateOfBirth) {
		toSerialize["dateOfBirth"] = o.DateOfBirth
	}
	if !utils.IsNil(o.Gender) {
		toSerialize["gender"] = o.Gender
	}
	if !utils.IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !utils.IsNil(o.Documents) {
		toSerialize["documents"] = o.Documents
	}
	return toSerialize, nil
}

type NullableStakeholder struct {
	value *Stakeholder
	isSet bool
}

func (v NullableStakeholder) Get() *Stakeholder {
	return v.value
}

func (v *NullableStakeholder) Set(val *Stakeholder) {
	v.value = val
	v.isSet = true
}

func (v NullableStakeholder) IsSet() bool {
	return v.isSet
}

func (v *NullableStakeholder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStakeholder(val *Stakeholder) *NullableStakeholder {
	return &NullableStakeholder{value: val, isSet: true}
}

func (v NullableStakeholder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStakeholder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


