/*
Flight Offers Price

Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).

API version: 1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package requests

import (
	"bytes"
	"context"
	"github.com/GIT_USER_ID/GIT_REPO_ID/api/models"
	"io"
	"net/http"
	"net/url"
)

type ApiQuoteAirOffersRequest struct {
	ctx context.Context
	ApiService *ShoppingAPIService
	xHTTPMethodOverride *string
	priceFlightOffersBody *models.GetPriceQuery
	include *[]string
	forceClass *bool
}

// the HTTP method to apply
func (r ApiQuoteAirOffersRequest) XHTTPMethodOverride(xHTTPMethodOverride string) ApiQuoteAirOffersRequest {
	r.xHTTPMethodOverride = &xHTTPMethodOverride
	return r
}

// list of criteria to confirm the price of a dedicated flight-offers
func (r ApiQuoteAirOffersRequest) PriceFlightOffersBody(priceFlightOffersBody models.GetPriceQuery) ApiQuoteAirOffersRequest {
	r.priceFlightOffersBody = &priceFlightOffersBody
	return r
}

// Sub-resources to be included:  * **credit-card-fees** to get the credit card fee applied on the booking  * **bags** to get extra bag options  * **other-services** to get services options  * **detailed-fare-rules** to get detailed fare rules options 
func (r ApiQuoteAirOffersRequest) Include(include []string) ApiQuoteAirOffersRequest {
	r.include = &include
	return r
}

// parameter to force the usage of booking class for pricing - **true**, to for pricing with the specified booking class - **false**, to get the best available price 
func (r ApiQuoteAirOffersRequest) ForceClass(forceClass bool) ApiQuoteAirOffersRequest {
	r.forceClass = &forceClass
	return r
}

func (r ApiQuoteAirOffersRequest) Execute() (*models.SuccessPricing, *http.Response, error) {
	return r.ApiService.QuoteAirOffersExecute(r)
}

/*
QuoteAirOffers Confirm pricing of given flightOffers.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiQuoteAirOffersRequest
*/
func (a *ShoppingAPIService) QuoteAirOffers(ctx context.Context) ApiQuoteAirOffersRequest {
	return ApiQuoteAirOffersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SuccessPricing
func (a *ShoppingAPIService) QuoteAirOffersExecute(r ApiQuoteAirOffersRequest) (*models.SuccessPricing, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []openapi.formFile
		localVarReturnValue  *models.SuccessPricing
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ShoppingAPIService.QuoteAirOffers")
	if err != nil {
		return localVarReturnValue, nil, &openapi.GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/shopping/flight-offers/pricing"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xHTTPMethodOverride == nil {
		return localVarReturnValue, nil, openapi.reportError("xHTTPMethodOverride is required and must be specified")
	}
	if r.priceFlightOffersBody == nil {
		return localVarReturnValue, nil, openapi.reportError("priceFlightOffersBody is required and must be specified")
	}

	if r.include != nil {
		openapi.parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	if r.forceClass != nil {
		openapi.parameterAddToHeaderOrQuery(localVarQueryParams, "forceClass", r.forceClass, "")
	} else {
		var defaultValue bool = false
		r.forceClass = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.amadeus+json"}

	// set Content-Type header
	localVarHTTPContentType := openapi.selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.amadeus+json"}

	// set Accept header
	localVarHTTPHeaderAccept := openapi.selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	openapi.parameterAddToHeaderOrQuery(localVarHeaderParams, "X-HTTP-Method-Override", r.xHTTPMethodOverride, "")
	// body params
	localVarPostBody = r.priceFlightOffersBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &openapi.GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = openapi.formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v Error500
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = openapi.formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &openapi.GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
