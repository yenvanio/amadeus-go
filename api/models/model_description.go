/*
Flight Offers Price

Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).

API version: 1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"github.com/GIT_USER_ID/GIT_REPO_ID/api"
)

// checks if the Description type satisfies the MappedNullable interface at compile time
var _ api.MappedNullable = &Description{}

// Description struct for Description
type Description struct {
	DescriptionType *string `json:"descriptionType,omitempty"`
	Text *string `json:"text,omitempty"`
}

// NewDescription instantiates a new Description object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDescription() *Description {
	this := Description{}
	return &this
}

// NewDescriptionWithDefaults instantiates a new Description object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDescriptionWithDefaults() *Description {
	this := Description{}
	return &this
}

// GetDescriptionType returns the DescriptionType field value if set, zero value otherwise.
func (o *Description) GetDescriptionType() string {
	if o == nil || api.IsNil(o.DescriptionType) {
		var ret string
		return ret
	}
	return *o.DescriptionType
}

// GetDescriptionTypeOk returns a tuple with the DescriptionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Description) GetDescriptionTypeOk() (*string, bool) {
	if o == nil || api.IsNil(o.DescriptionType) {
		return nil, false
	}
	return o.DescriptionType, true
}

// HasDescriptionType returns a boolean if a field has been set.
func (o *Description) HasDescriptionType() bool {
	if o != nil && !api.IsNil(o.DescriptionType) {
		return true
	}

	return false
}

// SetDescriptionType gets a reference to the given string and assigns it to the DescriptionType field.
func (o *Description) SetDescriptionType(v string) {
	o.DescriptionType = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *Description) GetText() string {
	if o == nil || api.IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Description) GetTextOk() (*string, bool) {
	if o == nil || api.IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *Description) HasText() bool {
	if o != nil && !api.IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *Description) SetText(v string) {
	o.Text = &v
}

func (o Description) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Description) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !api.IsNil(o.DescriptionType) {
		toSerialize["descriptionType"] = o.DescriptionType
	}
	if !api.IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	return toSerialize, nil
}

type NullableDescription struct {
	value *Description
	isSet bool
}

func (v NullableDescription) Get() *Description {
	return v.value
}

func (v *NullableDescription) Set(val *Description) {
	v.value = val
	v.isSet = true
}

func (v NullableDescription) IsSet() bool {
	return v.isSet
}

func (v *NullableDescription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDescription(val *Description) *NullableDescription {
	return &NullableDescription{value: val, isSet: true}
}

func (v NullableDescription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDescription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


