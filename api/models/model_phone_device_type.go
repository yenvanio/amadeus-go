/*
Flight Offers Price

Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).

API version: 1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// PhoneDeviceType Type of the device (Landline, Mobile or Fax)
type PhoneDeviceType string

// List of PhoneDeviceType
const (
	MOBILE   PhoneDeviceType = "MOBILE"
	LANDLINE PhoneDeviceType = "LANDLINE"
	FAX      PhoneDeviceType = "FAX"
)

// All allowed values of PhoneDeviceType enum
var AllowedPhoneDeviceTypeEnumValues = []PhoneDeviceType{
	"MOBILE",
	"LANDLINE",
	"FAX",
}

func (v *PhoneDeviceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PhoneDeviceType(value)
	for _, existing := range AllowedPhoneDeviceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PhoneDeviceType", value)
}

// NewPhoneDeviceTypeFromValue returns a pointer to a valid PhoneDeviceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPhoneDeviceTypeFromValue(v string) (*PhoneDeviceType, error) {
	ev := PhoneDeviceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PhoneDeviceType: valid values are %v", v, AllowedPhoneDeviceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PhoneDeviceType) IsValid() bool {
	for _, existing := range AllowedPhoneDeviceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PhoneDeviceType value
func (v PhoneDeviceType) Ptr() *PhoneDeviceType {
	return &v
}

type NullablePhoneDeviceType struct {
	value *PhoneDeviceType
	isSet bool
}

func (v NullablePhoneDeviceType) Get() *PhoneDeviceType {
	return v.value
}

func (v *NullablePhoneDeviceType) Set(val *PhoneDeviceType) {
	v.value = val
	v.isSet = true
}

func (v NullablePhoneDeviceType) IsSet() bool {
	return v.isSet
}

func (v *NullablePhoneDeviceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePhoneDeviceType(val *PhoneDeviceType) *NullablePhoneDeviceType {
	return &NullablePhoneDeviceType{value: val, isSet: true}
}

func (v NullablePhoneDeviceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePhoneDeviceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

