/*
Flight Offers Price

Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).

API version: 1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"github.com/GIT_USER_ID/GIT_REPO_ID"
	"github.com/GIT_USER_ID/GIT_REPO_ID/api"
)

// checks if the SuccessPricing type satisfies the MappedNullable interface at compile time
var _ api.MappedNullable = &SuccessPricing{}

// SuccessPricing struct for SuccessPricing
type SuccessPricing struct {
	Warnings     []openapi.Issue       `json:"warnings,omitempty"`
	Data         FlightOfferPricingOut `json:"data"`
	Included     *IncludedResourcesMap `json:"included,omitempty"`
	Dictionaries *openapi.Dictionaries `json:"dictionaries,omitempty"`
}

// NewSuccessPricing instantiates a new SuccessPricing object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuccessPricing(data FlightOfferPricingOut) *SuccessPricing {
	this := SuccessPricing{}
	this.Data = data
	return &this
}

// NewSuccessPricingWithDefaults instantiates a new SuccessPricing object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuccessPricingWithDefaults() *SuccessPricing {
	this := SuccessPricing{}
	return &this
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *SuccessPricing) GetWarnings() []openapi.Issue {
	if o == nil || api.IsNil(o.Warnings) {
		var ret []openapi.Issue
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuccessPricing) GetWarningsOk() ([]openapi.Issue, bool) {
	if o == nil || api.IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *SuccessPricing) HasWarnings() bool {
	if o != nil && !api.IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []Issue and assigns it to the Warnings field.
func (o *SuccessPricing) SetWarnings(v []openapi.Issue) {
	o.Warnings = v
}

// GetData returns the Data field value
func (o *SuccessPricing) GetData() FlightOfferPricingOut {
	if o == nil {
		var ret FlightOfferPricingOut
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *SuccessPricing) GetDataOk() (*FlightOfferPricingOut, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *SuccessPricing) SetData(v FlightOfferPricingOut) {
	o.Data = v
}

// GetIncluded returns the Included field value if set, zero value otherwise.
func (o *SuccessPricing) GetIncluded() IncludedResourcesMap {
	if o == nil || api.IsNil(o.Included) {
		var ret IncludedResourcesMap
		return ret
	}
	return *o.Included
}

// GetIncludedOk returns a tuple with the Included field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuccessPricing) GetIncludedOk() (*IncludedResourcesMap, bool) {
	if o == nil || api.IsNil(o.Included) {
		return nil, false
	}
	return o.Included, true
}

// HasIncluded returns a boolean if a field has been set.
func (o *SuccessPricing) HasIncluded() bool {
	if o != nil && !api.IsNil(o.Included) {
		return true
	}

	return false
}

// SetIncluded gets a reference to the given IncludedResourcesMap and assigns it to the Included field.
func (o *SuccessPricing) SetIncluded(v IncludedResourcesMap) {
	o.Included = &v
}

// GetDictionaries returns the Dictionaries field value if set, zero value otherwise.
func (o *SuccessPricing) GetDictionaries() openapi.Dictionaries {
	if o == nil || api.IsNil(o.Dictionaries) {
		var ret openapi.Dictionaries
		return ret
	}
	return *o.Dictionaries
}

// GetDictionariesOk returns a tuple with the Dictionaries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuccessPricing) GetDictionariesOk() (*openapi.Dictionaries, bool) {
	if o == nil || api.IsNil(o.Dictionaries) {
		return nil, false
	}
	return o.Dictionaries, true
}

// HasDictionaries returns a boolean if a field has been set.
func (o *SuccessPricing) HasDictionaries() bool {
	if o != nil && !api.IsNil(o.Dictionaries) {
		return true
	}

	return false
}

// SetDictionaries gets a reference to the given Dictionaries and assigns it to the Dictionaries field.
func (o *SuccessPricing) SetDictionaries(v openapi.Dictionaries) {
	o.Dictionaries = &v
}

func (o SuccessPricing) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SuccessPricing) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !api.IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	toSerialize["data"] = o.Data
	if !api.IsNil(o.Included) {
		toSerialize["included"] = o.Included
	}
	if !api.IsNil(o.Dictionaries) {
		toSerialize["dictionaries"] = o.Dictionaries
	}
	return toSerialize, nil
}

type NullableSuccessPricing struct {
	value *SuccessPricing
	isSet bool
}

func (v NullableSuccessPricing) Get() *SuccessPricing {
	return v.value
}

func (v *NullableSuccessPricing) Set(val *SuccessPricing) {
	v.value = val
	v.isSet = true
}

func (v NullableSuccessPricing) IsSet() bool {
	return v.isSet
}

func (v *NullableSuccessPricing) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuccessPricing(val *SuccessPricing) *NullableSuccessPricing {
	return &NullableSuccessPricing{value: val, isSet: true}
}

func (v NullableSuccessPricing) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuccessPricing) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


