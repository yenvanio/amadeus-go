/*
Flight Offers Price

Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).

API version: 1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// StakeholderGender The gender
type StakeholderGender string

// List of StakeholderGender
const (
	MALE   StakeholderGender = "MALE"
	FEMALE StakeholderGender = "FEMALE"
)

// All allowed values of StakeholderGender enum
var AllowedStakeholderGenderEnumValues = []StakeholderGender{
	"MALE",
	"FEMALE",
}

func (v *StakeholderGender) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StakeholderGender(value)
	for _, existing := range AllowedStakeholderGenderEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StakeholderGender", value)
}

// NewStakeholderGenderFromValue returns a pointer to a valid StakeholderGender
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStakeholderGenderFromValue(v string) (*StakeholderGender, error) {
	ev := StakeholderGender(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StakeholderGender: valid values are %v", v, AllowedStakeholderGenderEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StakeholderGender) IsValid() bool {
	for _, existing := range AllowedStakeholderGenderEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StakeholderGender value
func (v StakeholderGender) Ptr() *StakeholderGender {
	return &v
}

type NullableStakeholderGender struct {
	value *StakeholderGender
	isSet bool
}

func (v NullableStakeholderGender) Get() *StakeholderGender {
	return v.value
}

func (v *NullableStakeholderGender) Set(val *StakeholderGender) {
	v.value = val
	v.isSet = true
}

func (v NullableStakeholderGender) IsSet() bool {
	return v.isSet
}

func (v *NullableStakeholderGender) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStakeholderGender(val *StakeholderGender) *NullableStakeholderGender {
	return &NullableStakeholderGender{value: val, isSet: true}
}

func (v NullableStakeholderGender) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStakeholderGender) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

