/*
Flight Offers Price

Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   Please also be aware that our test environment is based on a subset of the production, if you are not returning any results try with big cities/airports like LON (London) or NYC (New-York).

API version: 1.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"github.com/GIT_USER_ID/GIT_REPO_ID/api"
)

// checks if the ElementaryPrice type satisfies the MappedNullable interface at compile time
var _ api.MappedNullable = &ElementaryPrice{}

// ElementaryPrice elementaryPrice
type ElementaryPrice struct {
	// Amount of the fare. could be alpha numeric. Ex- 500.20 or 514.13A, 'A'signifies additional collection.
	Amount *string `json:"amount,omitempty"`
	// Currency type of the fare.
	CurrencyCode *string `json:"currencyCode,omitempty"`
}

// NewElementaryPrice instantiates a new ElementaryPrice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewElementaryPrice() *ElementaryPrice {
	this := ElementaryPrice{}
	return &this
}

// NewElementaryPriceWithDefaults instantiates a new ElementaryPrice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewElementaryPriceWithDefaults() *ElementaryPrice {
	this := ElementaryPrice{}
	return &this
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *ElementaryPrice) GetAmount() string {
	if o == nil || api.IsNil(o.Amount) {
		var ret string
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementaryPrice) GetAmountOk() (*string, bool) {
	if o == nil || api.IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *ElementaryPrice) HasAmount() bool {
	if o != nil && !api.IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given string and assigns it to the Amount field.
func (o *ElementaryPrice) SetAmount(v string) {
	o.Amount = &v
}

// GetCurrencyCode returns the CurrencyCode field value if set, zero value otherwise.
func (o *ElementaryPrice) GetCurrencyCode() string {
	if o == nil || api.IsNil(o.CurrencyCode) {
		var ret string
		return ret
	}
	return *o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementaryPrice) GetCurrencyCodeOk() (*string, bool) {
	if o == nil || api.IsNil(o.CurrencyCode) {
		return nil, false
	}
	return o.CurrencyCode, true
}

// HasCurrencyCode returns a boolean if a field has been set.
func (o *ElementaryPrice) HasCurrencyCode() bool {
	if o != nil && !api.IsNil(o.CurrencyCode) {
		return true
	}

	return false
}

// SetCurrencyCode gets a reference to the given string and assigns it to the CurrencyCode field.
func (o *ElementaryPrice) SetCurrencyCode(v string) {
	o.CurrencyCode = &v
}

func (o ElementaryPrice) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ElementaryPrice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !api.IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !api.IsNil(o.CurrencyCode) {
		toSerialize["currencyCode"] = o.CurrencyCode
	}
	return toSerialize, nil
}

type NullableElementaryPrice struct {
	value *ElementaryPrice
	isSet bool
}

func (v NullableElementaryPrice) Get() *ElementaryPrice {
	return v.value
}

func (v *NullableElementaryPrice) Set(val *ElementaryPrice) {
	v.value = val
	v.isSet = true
}

func (v NullableElementaryPrice) IsSet() bool {
	return v.isSet
}

func (v *NullableElementaryPrice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableElementaryPrice(val *ElementaryPrice) *NullableElementaryPrice {
	return &NullableElementaryPrice{value: val, isSet: true}
}

func (v NullableElementaryPrice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableElementaryPrice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


